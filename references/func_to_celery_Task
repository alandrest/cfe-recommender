1. Define func (movies/tasks.py):

    @shared_task(name='TASK_NAME')
    def FUNC_NAME(params):
        do_something

2. Schedule at celery.py:

    app.autodiscover_tasks()

    Define tasks here or define it directly at the PERIODIC TASKS in the DB:

        app.conf.beat_schedule = {
            "func_name___every_x_mins":{
                'task': 'TASK_NAME',
                'schedule': x_mins * 60, # x mins
                'kwargs': {"param_1": 6, "param_2": False},
            },
        }

        if not mentioned task_name then use func_name with the full path like:
            'task': 'movie.tasks.FUNC_NAME',

3. See results (if running beat) at the DB:  "Celery results/Task results"

==================

Run:
1. app
2. redis
3. celery
4. celery beat

===================

When UPDATE the celery.py, restart the worker and beat

When REMOVING the task, remember to remove it from the DB as well:
"PERIODIC TASKS/Periodic tasks"

MANUAL run of the task:
from the python shell:
    from movies.tasks import FUNC_NAME
    FUNC_NAME()
    or:
    FUNC_NAME.delay()
===============================

Run MULTIPLE INSTANCES:

In the terminal run another celery instance: worker


===============================

Turn Functions into Celery Tasks
    # myapp/tasks.py

    def my_function(a=123, b=None, c=True):
    ...
becomes

    # myapp/tasks.py
    from celery import shared_task

    @shared_task
    def my_function(a=123, b=None, c=True):
    ...
or

    # myapp/tasks.py
    from celery import shared_task

    @shared_task(name="my_function")
    def my_function(a=123, b=None, c=True):
        ...

Running Celery Tasks
    from myapp.tasks import my_function

Typical

    my_function(a=456, b="Sweet", c=False)

Celery Shortcut

    my_function.delay(a=456, b="Sweet", c=False)

Preferred Celery Call

    delay_seconds = 15
    my_function.apply_async(kwargs={"a": 456, "b": "Sweet", "c": False}, countdown=delay_seconds)

=============================

Celery common:
Reference: https://github.com/codingforentrepreneurs/recommender/blob/main/celery_reference.md

Celery Reference

Running Celery

Worker-only
    celery -A cfehome worker -l info

Beat-only (Scheduler-only)
    celery -A cfehome beat -l info

Worker & Beat
    celery -A cfehome worker -l info --beat

Using -l info is recommended in development, it's optional once in production.

==================================
Windows (from src dir):

If celery.py changed:
    - stop beat and workers
    - cleanup db: Periodic tasks + "started" from celery_results.task_results
    - rerun the redis

1. Beat:
    celery -A cfehome beat

2. Worker:
    celery -A cfehome worker -l info -P gevent
